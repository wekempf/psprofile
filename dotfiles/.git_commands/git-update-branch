#!/usr/bin/env bash
#
# This script simply echos the user input, but illustrates git subcommand best
# practices, including how to parse command line options.
#

# Use git-sh-setup: https://www.kernel.org/pub/software/scm/git/docs/git-sh-setup.html
OPTIONS_STUCKLONG=t
OPTIONS_KEEPDASHDASH=
OPTIONS_SPEC="\
git update-branch [<branch>]

Fetches changes then rebases the upstream branch onto the current branch.
The <branch> can be provided in <remote>/<branch> form. If it's not the
<remote> is implied to be the value from 'git remote show'. If no branch is
given it's implied to be the default branch of the implied remote.
--
<branch>  the branch to rebase from
"

SUBDIRECTORY_OK="yes" . "$(git --exec-path)/git-sh-setup"

while [ "$#" != 0 ]; do
    case "$1" in
    --) shift; break;;
    esac
    shift
done

test $# -gt 2 && die "Too many arguments"

if [[ -n $(git status --porcelain) ]]; then
    die 'Uncommitted changes detected. Commit or stash your changes and try again.'
fi

remote=$(git remote show)
if [ -z "$1" ]; then
    branch="$(git remote show $remote | grep 'HEAD branch' | cut -d' ' -f5)"
fi

git branch -r | grep -qn "$branch" || die "Branch '$branch' does not exist"
curbranch=$(git rev-parse --abbrev-ref HEAD)
[ "$branch" != "$curbranch" ] || die "Cannot update $branch"

git fetch "$remote" "$branch:$branch" || die "Failed to fetch branch '$branch' from '$remote'"
git rebase "$branch"

if [ -f "$(git rev-parse --git-dir)/REBASE_HEAD" ]; then
    echo "Rebasing from '$branch' in progress."
else
    echo "Rebased from '$branch'."
fi
