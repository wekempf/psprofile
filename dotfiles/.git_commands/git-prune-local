#!/usr/bin/env bash
#
# This script deletes local branches that track a remote branch that no longer exists.
#

# Use git-sh-setup: https://www.kernel.org/pub/software/scm/git/docs/git-sh-setup.html
OPTIONS_STUCKLONG=t
OPTIONS_SPEC="\
git prune-local [options]

Deletes local branches that track a remote branch that no longer exists.
--
d,delete           Delete the dangling branches. The branch must be fully merged in its upstream branch.
f,force            Force the deletion of the branch even if unmerged.
D                  Shortcut for --delete --force.
r,remote=!remote   The remote used to determine what to prune. Default is 'origin'.
"

SUBDIRECTORY_OK="yes" . "$(git --exec-path)/git-sh-setup"

# Defaults
DELETE=0
FORCE=0
RMT=origin

function getValue {
    IFS='=' read -ra parts <<<"$1"
    echo ${parts[1]}
}

function trim() {
    local var="$*"
    # remove leading whitespace characters
    var="${var#"${var%%[![:space:]]*}"}"
    # remove trailing whitespace characters
    var="${var%"${var##*[![:space:]]}"}"
    printf '%s' "$var"
}

while test $# != 0; do
    case "$1" in
        --delete) DELETE=1 ;;
        --no-delete) DELETE=0 ;;
        --force) FORCE=1 ;;
        --no-force) FORCE=0 ;;
        -D) DELETE=1; FORCE=1 ;;
        --remote=remote) RMT=$(getValue "$1") ;;
        --) shift; break ;;
    esac
    shift
done

if [ $# -gt 0 ]; then
    die "Too many arguments"
fi

git fetch --prune
REMOTE=$(git for-each-ref --format="%(refname)" "refs/remotes/$RMT/" |
    sed '/HEAD/d' |
    sed "s#^refs/remotes/$RMT/##" | sort -V)
LOCAL=$(git for-each-ref --format="%(refname) %(upstream:remotename)" refs/heads/ |
    sed 's#^refs/heads/##' |
    sort -V |
    awk "{if(\$2==\"$RMT\") print \$1}")
DANGLING=$(diff --changed-group-format='%>' --unchanged-group-format='' <(echo "$REMOTE") <(echo "$LOCAL"))

found=0
while read branch; do
    if [ -z "$branch" ]; then
        continue
    fi
    found=1
    if [ $DELETE -eq 1 ]; then
        if [ $FORCE -eq 1 ]; then
            git branch -D "$branch"
        else
            git branch -d "$branch"
        fi
    else
        echo "would delete $branch"
    fi
done <<< "$(trim $DANGLING)"

if [ $found -eq 0 ]; then
    echo "No dangling branches found."
elif [ $DELETE -eq 0 ]; then
    echo "Specify -d or -D to delete branches."
fi
